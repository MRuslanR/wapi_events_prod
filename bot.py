# bot.py
import asyncio
import html
from datetime import time, timezone

from telegram import Update, constants
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
)

import config
from main import main_cycle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
config.setup_logging()
logger = config.get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
processing_lock = asyncio.Lock()


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def escape_html(text: str) -> str:
    return html.escape(str(text))


async def send_long_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    MAX_LENGTH = 4000
    if len(text) <= MAX_LENGTH:
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=constants.ParseMode.HTML)
        return

    parts = []
    current_pos = 0
    while current_pos < len(text):
        end_pos = current_pos + MAX_LENGTH
        part = text[current_pos:end_pos]
        if end_pos < len(text):
            last_newline = part.rfind('\n')
            if last_newline != -1:
                part = part[:last_newline]
                end_pos = current_pos + len(part) + 1
            else:
                last_space = part.rfind(' ')
                if last_space != -1:
                    part = part[:last_space]
                    end_pos = current_pos + len(part) + 1
        parts.append(part)
        current_pos = end_pos

    for part in parts:
        if part.strip():
            await context.bot.send_message(chat_id=chat_id, text=part, parse_mode=constants.ParseMode.HTML)
            await asyncio.sleep(0.5)


async def send_typing_periodically(context: ContextTypes.DEFAULT_TYPE, chat_id: int, stop_event: asyncio.Event):
    while not stop_event.is_set():
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
            await asyncio.wait_for(stop_event.wait(), timeout=4)
        except asyncio.TimeoutError:
            continue
        except (asyncio.CancelledError, Exception):
            break


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---
async def run_processing_job(context: ContextTypes.DEFAULT_TYPE, chat_id: int, trigger_type: str):
    if processing_lock.locked():
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (%s), –∫–æ–≥–¥–∞ –æ–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", trigger_type)
        message_text = "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        if trigger_type == 'scheduled' and context.job:
            job_name_escaped = escape_html(context.job.name)
            message_text += f"\n\n<i>(–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ ¬´{job_name_escaped}¬ª –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω)</i>"
        await context.bot.send_message(chat_id=chat_id, text=message_text, parse_mode=constants.ParseMode.HTML)
        return

    async with processing_lock:
        logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢—Ä–∏–≥–≥–µ—Ä: %s.", trigger_type)
        proc_msg = None
        stop_typing_event = asyncio.Event()
        typing_task = asyncio.create_task(send_typing_periodically(context, chat_id, stop_typing_event))

        try:
            proc_msg = await context.bot.send_message(chat_id=chat_id,
                                                      text=f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π... (–ó–∞–ø—É—Å–∫: {trigger_type})")
            logger.info("–ó–∞–ø—É—Å–∫ main_cycle –¥–ª—è —á–∞—Ç–∞ %d", chat_id)

            # --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞ –∏–∑ main_cycle ---
            main_message, alert_message = await asyncio.to_thread(main_cycle)

            stop_typing_event.set()
            await typing_task

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ—è—Ö —Ç–µ–ø–µ—Ä—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, –∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Excel

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if main_message == 'No news':
                logger.info("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
                await context.bot.send_message(chat_id=chat_id,
                                               text="No news for the past period")
            else:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %d.", chat_id)
                await send_long_message(context, chat_id, main_message)

        except Exception as e:
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_processing_job", exc_info=True)
            if not stop_typing_event.is_set(): stop_typing_event.set()
            await typing_task
            try:
                error_text = escape_html(e)
                await context.bot.send_message(chat_id=chat_id,
                                               text=f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n<code>{error_text}</code>",
                                               parse_mode=constants.ParseMode.HTML)
            except Exception as send_e:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: %s", send_e)
        finally:
            if not typing_task.done(): typing_task.cancel()
            if proc_msg:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=proc_msg.message_id)
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–æ.")
                except Exception:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ.")
            logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞.")


async def start_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.id != config.TELEGRAM_CHAT_ID:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –≤ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–º —á–∞—Ç–µ ID: %d", chat.id)
        return
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –≤ —á–∞—Ç–µ %d", chat.id)
    asyncio.create_task(run_processing_job(context, chat.id, trigger_type='manual'))


async def scheduled_run(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    logger.info("–°—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (job: %s)", job.name)
    await run_processing_job(context, chat_id, trigger_type='scheduled')


def main():
    logger.info("--- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---")
    try:
        config.load_feed_sources()
    except config.ConfigError as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: %s", e)
        return

    if not config.TELEGRAM_BOT_TOKEN:
        logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    if not config.TELEGRAM_CHAT_ID:
        logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_CHAT_ID. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    app = ApplicationBuilder().token(config.TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.COMMAND & filters.Regex(r'^/start'), start_command_handler))

    schedule_times = config.load_schedule()
    if schedule_times:
        job_queue = app.job_queue
        for t_str in schedule_times:
            try:
                hour, minute = map(int, t_str.split(':'))
                run_time = time(hour, minute, tzinfo=timezone.utc)
                job_queue.run_daily(callback=scheduled_run, time=run_time, chat_id=config.TELEGRAM_CHAT_ID,
                                    name=f"Daily digest at {t_str} UTC")
            except (ValueError, TypeError):
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: '%s'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", t_str)
        if job_queue.jobs():
            logger.info("–í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–æ: %d", len(job_queue.jobs()))
    else:
        logger.info("–ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()


if __name__ == "__main__":
    main()